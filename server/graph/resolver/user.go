package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"log/slog"

	"github.com/tomato3713/storyline/server/graph"
	"github.com/tomato3713/storyline/server/graph/model"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string) (*model.User, error) {
	user, err := r.Srv.CreateUserByName(ctx, name)
	if err != nil {
		return nil, err
	}
	return user.ToGQLModel(), nil
}

// UserByName is the resolver for the userByName field.
func (r *queryResolver) UserByName(ctx context.Context, name string) (*model.User, error) {
	user, err := r.Srv.GetUserByName(ctx, name)
	if err != nil {
		return nil, err
	}
	return user.ToGQLModel(), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	slog.Info("Begin queryResolver.Users")
	users, err := r.Srv.GetUserAll(ctx)
	if err != nil {
		return nil, err
	}

	slog.Info("queryResolver.Users got users", "length", len(users))
	results := make([]*model.User, len(users))
	slog.Info("queryResolver.Users make results", "length", len(users))
	for i, user := range users {
		results[i] = user.ToGQLModel()
	}

	return results, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
